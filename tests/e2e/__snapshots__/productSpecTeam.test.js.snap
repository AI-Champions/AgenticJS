// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Product Spec Team Workflows Using OpenAI Agents completes the entire workflow successfully 1`] = `
{
  "agents": [
    {
      "agentInstance": {
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Emma",
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Lucas",
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
    {
      "agentInstance": {
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Mia",
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "env": "[REDACTED]",
      "id": "[REDACTED]",
      "llmConfig": {
        "apiKey": "[REDACTED]",
        "maxRetries": 1,
        "model": "gpt-4o-mini",
        "provider": "openai",
      },
      "type": "ReactChampionAgent",
    },
  ],
  "inputs": {
    "founderIdea": "I want to add a Referral program to our SAAS platform.",
  },
  "logLevel": undefined,
  "name": "Product Specs Team",
  "tasks": [
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
          "maxIterations": 10,
          "memory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "name": "Emma",
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A functional outline of the Founder Idea",
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 648,
        "outputTokens": 208,
        "parsingErrors": 0,
      },
      "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
          "maxIterations": 10,
          "memory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "name": "Lucas",
          "role": "Technical Writer",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
      "isDeliverable": true,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 885,
        "outputTokens": 977,
        "parsingErrors": 0,
      },
      "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
          "maxIterations": 10,
          "memory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "name": "Mia",
          "role": "Validator",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "dependencies": [],
      "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "duration": "[REDACTED]",
      "endTime": "[REDACTED]",
      "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
      "id": "[REDACTED]",
      "inputs": {
        "founderIdea": "I want to add a Referral program to our SAAS platform.",
      },
      "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
      "isDeliverable": false,
      "iterationCount": 1,
      "llmUsageStats": {
        "callsCount": 1,
        "callsErrorCount": 0,
        "inputTokens": 1787,
        "outputTokens": 977,
        "parsingErrors": 0,
      },
      "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
      "startTime": "[REDACTED]",
      "stats": null,
      "status": "DONE",
      "store": [Function],
      "title": "",
    },
  ],
  "teamWorkflowStatus": "FINISHED",
  "workflowContext": " 
            Results from task Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.: 
 To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.
             

 
            Results from task Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.: 
 # Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.
             

 
            Results from task Review the technical specifications to ensure they match the founder's vision and that are technically feasible.: 
 # Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.
             

",
  "workflowLogs": [
    {
      "agent": null,
      "logDescription": "Workflow initiated for team *Product Specs Team*.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "inputs": null,
        "message": "Workflow has been initialized with input settings.",
        "startTime": undefined,
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "RUNNING",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Business Analysis",
          "env": "[REDACTED]",
          "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
          "maxIterations": 10,
          "memory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "name": "Emma",
          "role": "Requirements Analyst",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Emma",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Analyze the founder's... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Emma",
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Emma",
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Emma - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Emma",
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Emma",
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Emma starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "messages": [
          {
            "content": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "type": "SystemMessage",
          },
          {
            "content": "
            Hi Emma, please complete the following task: Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it..
            Your expected output should be: "A functional outline of the Founder Idea".
            
        ",
            "type": "HumanMessage",
          },
        ],
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Emma",
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Emma",
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Emma finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "output": {
          "llmOutput": "{
    "finalAnswer": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse."
}",
          "llmUsageStats": {
            "inputTokens": 648,
            "outputTokens": 208,
          },
          "parsedLLMOutput": {
            "finalAnswer": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
          },
        },
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Emma",
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Emma",
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Emma got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "output": {
          "finalAnswer": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        },
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Emma",
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Emma",
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Emma - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Emma",
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Emma",
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Emma - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Emma",
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Business Analysis",
        "env": "[REDACTED]",
        "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Emma",
        "role": "Requirements Analyst",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Emma",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Analyze the founder's....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0001,
          "totalCost": 0.0002,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 648,
          "outputTokens": 208,
          "parsingErrors": 0,
        },
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Business Analysis",
            "env": "[REDACTED]",
            "goal": "Outline core functionalities and objectives for new features based on the founder’s input.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Emma.

        Your role is: Requirements Analyst.
        Your background is: Business Analysis.
        Your main goal is: Outline core functionalities and objectives for new features based on the founder’s input.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A functional outline of the Founder Idea

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Emma",
            "role": "Requirements Analyst",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A functional outline of the Founder Idea",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Analyze the founder's idea: I want to add a Referral program to our SAAS platform. and outline the necessary functionalities to implement it.",
        "isDeliverable": false,
        "result": "To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Analyze the founder's...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Technical Writing",
          "env": "[REDACTED]",
          "goal": "Convert functional outlines into detailed technical specifications.",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
          "maxIterations": 10,
          "memory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "name": "Lucas",
          "role": "Technical Writer",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Lucas",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Create detailed technical... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Lucas",
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Lucas",
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Lucas - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Lucas",
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Lucas",
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Lucas starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "messages": [
          {
            "content": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "type": "SystemMessage",
          },
          {
            "content": "
            Hi Lucas, please complete the following task: Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria..
            Your expected output should be: "A detailed technical specifications document. Must be in Markdown format.".
            Incorporate the following findings and insights from previous tasks: " 
            Results from task Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.: 
 To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.
             

"
        ",
            "type": "HumanMessage",
          },
        ],
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Lucas",
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Lucas",
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Lucas finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "output": {
          "llmOutput": "{
   "finalAnswer": "# Technical Specifications Document: Referral Program for SAAS Platform\\n\\n## Table of Contents\\n1. [User Stories](#user-stories)\\n2. [System Requirements](#system-requirements)\\n3. [Acceptance Criteria](#acceptance-criteria)\\n\\n## User Stories\\n### User Registration\\n- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.\\n\\n### Unique Referral Links\\n- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.\\n\\n### Tracking System\\n- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.\\n\\n### Referral Rewards\\n- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.\\n\\n### Dashboard\\n- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.\\n\\n### Admin Panel\\n- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.\\n\\n### Notifications\\n- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.\\n\\n### Terms and Conditions\\n- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.\\n\\n## System Requirements\\n1. **User Registration**:  \\n   - Ability to collect user information (name, email, password).\\n   - Store data securely in a database.\\n\\n2. **Unique Referral Links**:  \\n   - Generate unique links for each registered user upon successful registration.\\n   - Ensure links redirect to the registration page with tracking parameters.\\n\\n3. **Tracking System**:  \\n   - Implement a database model to track referrals associated with each user.\\n   - Create APIs to retrieve referral data for users and admins.\\n\\n4. **Referral Rewards**:  \\n   - Define reward structure (discounts, credits) in the system.\\n   - Ensure rewards can be configured through the admin panel.\\n\\n5. **Dashboard**:  \\n   - Provide a user interface for users to view their stats in real-time.\\n   - Include graphs/charts for data visualization.\\n\\n6. **Admin Panel**:  \\n   - Create a web interface for admin to manage the program.\\n   - Functions to create, read, update, and delete (CRUD) referral configurations.\\n\\n7. **Notifications**:  \\n   - Implement an email/SMS notification system.\\n   - Allow users to customize notification preferences in their profile settings.\\n\\n8. **Terms and Conditions**:  \\n   - Document must be easily accessible to users during account creation.\\n   - Include an acknowledgment checkbox during registration.\\n\\n## Acceptance Criteria\\n1. **User Registration**:  \\n   - Users can register with valid and unique email addresses.\\n   - Registration confirmation email is sent upon registration.\\n\\n2. **Unique Referral Links**:  \\n   - Each user receives a functional referral link after registration.\\n\\n3. **Tracking System**:  \\n   - Admin can see the referral data for each user.\\n   - Data is updated in real-time.\\n\\n4. **Referral Rewards**:  \\n   - Rewards are issued automatically upon qualification.\\n   - Users can view pending and completed rewards.\\n\\n5. **Dashboard**:  \\n   - Users can access their dashboard without errors.\\n   - Dashboard updates in real-time when new referrals occur.\\n\\n6. **Admin Panel**:  \\n   - Admin can successfully manage and set rules for the referral program.\\n   - Admins receive notifications of any issues in the system.\\n\\n7. **Notifications**:  \\n   - Users receive timely notifications regarding their referrals and rewards.\\n   - Notification settings are honored as per user preferences.\\n\\n8. **Terms and Conditions**:  \\n   - Users must acknowledge terms before completing registration.\\n   - Terms are kept up to date and reflect any changes in policy."
}",
          "llmUsageStats": {
            "inputTokens": 885,
            "outputTokens": 977,
          },
          "parsedLLMOutput": {
            "finalAnswer": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
          },
        },
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Lucas",
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Lucas",
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Lucas got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "output": {
          "finalAnswer": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        },
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Lucas",
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Lucas",
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Lucas - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Lucas",
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Lucas",
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Lucas - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Lucas",
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Technical Writing",
        "env": "[REDACTED]",
        "goal": "Convert functional outlines into detailed technical specifications.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Lucas",
        "role": "Technical Writer",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Lucas",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Create detailed technical....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0001,
          "costOutputTokens": 0.0006,
          "totalCost": 0.0007,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 885,
          "outputTokens": 977,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Technical Writing",
            "env": "[REDACTED]",
            "goal": "Convert functional outlines into detailed technical specifications.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Lucas.

        Your role is: Technical Writer.
        Your background is: Technical Writing.
        Your main goal is: Convert functional outlines into detailed technical specifications.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A detailed technical specifications document. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Lucas",
            "role": "Technical Writer",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A detailed technical specifications document. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.",
        "isDeliverable": true,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Create detailed technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {
          "background": "Quality Assurance",
          "env": "[REDACTED]",
          "goal": "Ensure the specifications are accurate and complete.",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "llmInstance": {
            "id": [
              "langchain",
              "chat_models",
              "openai",
              "ChatOpenAI",
            ],
            "kwargs": {
              "callbacks": undefined,
              "max_retries": 1,
              "model": "gpt-4o-mini",
              "openai_api_key": {
                "id": [
                  "OPENAI_API_KEY",
                ],
                "lc": 1,
                "type": "secret",
              },
              "provider": "openai",
              "verbose": undefined,
            },
            "lc": 1,
            "type": "constructor",
          },
          "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
          "maxIterations": 10,
          "memory": {
            "id": [
              "langchain",
              "stores",
              "message",
              "in_memory",
              "InMemoryChatMessageHistory",
            ],
            "lc": 1,
            "type": "not_implemented",
          },
          "name": "Mia",
          "role": "Validator",
          "status": "TASK_COMPLETED",
          "store": [Function],
          "tools": [],
        },
        "env": "[REDACTED]",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "type": "ReactChampionAgent",
      },
      "agentName": "Mia",
      "agentStatus": "INITIAL",
      "logDescription": "Task: Review the technical... started.",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Mia",
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Mia",
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "ITERATION_START",
      "logDescription": "🏁 Agent Mia - ITERATION_START (1/10)",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Mia",
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Mia",
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "THINKING",
      "logDescription": "🤔 Agent Mia starts thinking...",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "messages": [
          {
            "content": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "type": "SystemMessage",
          },
          {
            "content": "
            Hi Mia, please complete the following task: Review the technical specifications to ensure they match the founder's vision and that are technically feasible..
            Your expected output should be: "A validated technical specifications document ready for development. Must be in Markdown format.".
            Incorporate the following findings and insights from previous tasks: " 
            Results from task Analyze the founder's idea: {founderIdea} and outline the necessary functionalities to implement it.: 
 To implement a Referral program for the SAAS platform, the following functionalities are necessary: 1. User Registration: A feature that allows users to sign up and create accounts. 2. Unique Referral Links: Generate unique referral links for each user to share with others. 3. Tracking System: Implement tracking to monitor how many referrals each user generates. 4. Referral Rewards: Define the types of rewards (e.g., discounts, credits, etc.) for both the referrer and the referee upon successful sign-up or purchase. 5. Dashboard: Create a dashboard for users to view their referral stats, rewards earned, and referral link performance. 6. Admin Panel: An interface for administrators to manage the referral program, including setting rules, tracking overall performance, and issuing rewards. 7. Notifications: Automated emails or notifications to inform users about their referral status and rewards. 8. Terms and Conditions: Clearly outline the rules of the referral program to ensure compliance and prevent abuse.
             

 
            Results from task Create detailed technical specifications based on the functional outline provided. Include user stories, system requirements, and acceptance criteria.: 
 # Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.
             

"
        ",
            "type": "HumanMessage",
          },
        ],
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Mia",
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Mia",
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "THINKING_END",
      "logDescription": "🤔 Agent Mia finished thinking.",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "output": {
          "llmOutput": "{
    "finalAnswer": "# Technical Specifications Document: Referral Program for SAAS Platform\\n\\n## Table of Contents\\n1. [User Stories](#user-stories)\\n2. [System Requirements](#system-requirements)\\n3. [Acceptance Criteria](#acceptance-criteria)\\n\\n## User Stories\\n### User Registration\\n- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.\\n\\n### Unique Referral Links\\n- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.\\n\\n### Tracking System\\n- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.\\n\\n### Referral Rewards\\n- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.\\n\\n### Dashboard\\n- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.\\n\\n### Admin Panel\\n- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.\\n\\n### Notifications\\n- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.\\n\\n### Terms and Conditions\\n- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.\\n\\n## System Requirements\\n1. **User Registration**:  \\n   - Ability to collect user information (name, email, password).\\n   - Store data securely in a database.\\n\\n2. **Unique Referral Links**:  \\n   - Generate unique links for each registered user upon successful registration.\\n   - Ensure links redirect to the registration page with tracking parameters.\\n\\n3. **Tracking System**:  \\n   - Implement a database model to track referrals associated with each user.\\n   - Create APIs to retrieve referral data for users and admins.\\n\\n4. **Referral Rewards**:  \\n   - Define reward structure (discounts, credits) in the system.\\n   - Ensure rewards can be configured through the admin panel.\\n\\n5. **Dashboard**:  \\n   - Provide a user interface for users to view their stats in real-time.\\n   - Include graphs/charts for data visualization.\\n\\n6. **Admin Panel**:  \\n   - Create a web interface for admin to manage the program.\\n   - Functions to create, read, update, and delete (CRUD) referral configurations.\\n\\n7. **Notifications**:  \\n   - Implement an email/SMS notification system.\\n   - Allow users to customize notification preferences in their profile settings.\\n\\n8. **Terms and Conditions**:  \\n   - Document must be easily accessible to users during account creation.\\n   - Include an acknowledgment checkbox during registration.\\n\\n## Acceptance Criteria\\n1. **User Registration**:  \\n   - Users can register with valid and unique email addresses.\\n   - Registration confirmation email is sent upon registration.\\n\\n2. **Unique Referral Links**:  \\n   - Each user receives a functional referral link after registration.\\n\\n3. **Tracking System**:  \\n   - Admin can see the referral data for each user.\\n   - Data is updated in real-time.\\n\\n4. **Referral Rewards**:  \\n   - Rewards are issued automatically upon qualification.\\n   - Users can view pending and completed rewards.\\n\\n5. **Dashboard**:  \\n   - Users can access their dashboard without errors.\\n   - Dashboard updates in real-time when new referrals occur.\\n\\n6. **Admin Panel**:  \\n   - Admin can successfully manage and set rules for the referral program.\\n   - Admins receive notifications of any issues in the system.\\n\\n7. **Notifications**:  \\n   - Users receive timely notifications regarding their referrals and rewards.\\n   - Notification settings are honored as per user preferences.\\n\\n8. **Terms and Conditions**:  \\n   - Users must acknowledge terms before completing registration.\\n   - Terms are kept up to date and reflect any changes in policy."
}",
          "llmUsageStats": {
            "inputTokens": 1787,
            "outputTokens": 977,
          },
          "parsedLLMOutput": {
            "finalAnswer": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
          },
        },
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Mia",
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Mia",
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "FINAL_ANSWER",
      "logDescription": "🥳 Agent Mia got the FINAL_ANSWER",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "output": {
          "finalAnswer": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        },
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Mia",
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Mia",
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "ITERATION_END",
      "logDescription": "🔄 Agent Mia - ITERATION_END",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "iterations": 0,
        "maxAgentIterations": 10,
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Mia",
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Mia",
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "🏁 Agent Mia - TASK_COMPLETED",
      "logType": "AgentStatusUpdate",
      "metadata": {
        "duration": undefined,
        "endTime": undefined,
        "iterations": 1,
        "maxAgentIterations": 10,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": undefined,
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Mia",
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DOING",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": {
        "agentInstance": {},
        "background": "Quality Assurance",
        "env": "[REDACTED]",
        "goal": "Ensure the specifications are accurate and complete.",
        "id": "[REDACTED]",
        "llmConfig": {
          "apiKey": "[REDACTED]",
          "maxRetries": 1,
          "model": "gpt-4o-mini",
          "provider": "openai",
        },
        "llmInstance": {
          "id": [
            "langchain",
            "chat_models",
            "openai",
            "ChatOpenAI",
          ],
          "kwargs": {
            "callbacks": undefined,
            "max_retries": 1,
            "model": "gpt-4o-mini",
            "openai_api_key": {
              "id": [
                "OPENAI_API_KEY",
              ],
              "lc": 1,
              "type": "secret",
            },
            "provider": "openai",
            "verbose": undefined,
          },
          "lc": 1,
          "type": "constructor",
        },
        "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
        "maxIterations": 10,
        "memory": {
          "id": [
            "langchain",
            "stores",
            "message",
            "in_memory",
            "InMemoryChatMessageHistory",
          ],
          "lc": 1,
          "type": "not_implemented",
        },
        "name": "Mia",
        "role": "Validator",
        "status": "TASK_COMPLETED",
        "store": [Function],
        "tools": [],
      },
      "agentName": "Mia",
      "agentStatus": "TASK_COMPLETED",
      "logDescription": "Task completed: Review the technical....",
      "logType": "TaskStatusUpdate",
      "metadata": {
        "costDetails": {
          "costInputTokens": 0.0003,
          "costOutputTokens": 0.0006,
          "totalCost": 0.0009,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "iterationCount": 1,
        "llmUsageStats": {
          "callsCount": 1,
          "callsErrorCount": 0,
          "inputTokens": 1787,
          "outputTokens": 977,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
      },
      "task": {
        "agent": {
          "agentInstance": {
            "background": "Quality Assurance",
            "env": "[REDACTED]",
            "goal": "Ensure the specifications are accurate and complete.",
            "id": "[REDACTED]",
            "llmConfig": {
              "apiKey": "[REDACTED]",
              "maxRetries": 1,
              "model": "gpt-4o-mini",
              "provider": "openai",
            },
            "llmInstance": {
              "id": [
                "langchain",
                "chat_models",
                "openai",
                "ChatOpenAI",
              ],
              "kwargs": {
                "callbacks": undefined,
                "max_retries": 1,
                "model": "gpt-4o-mini",
                "openai_api_key": {
                  "id": [
                    "OPENAI_API_KEY",
                  ],
                  "lc": 1,
                  "type": "secret",
                },
                "provider": "openai",
                "verbose": undefined,
              },
              "lc": 1,
              "type": "constructor",
            },
            "llmSystemMessage": "You are Mia.

        Your role is: Validator.
        Your background is: Quality Assurance.
        Your main goal is: Ensure the specifications are accurate and complete.
        Your are working as part of a team.

        For your work you will have available:

        - Access to a defined set of tools. 
        - Findings and insights from previous tasks. You must use this information to complete your current task.
        - Must follow an specific format for your output.

        ## Tools available for your use: 

        No tools available. You must reply in your internal knowledge.

        **Important:** You ONLY have access to the tools above, and should NEVER make up tools that are not listed here.

        ## Format of your output

        You will return just one of the following:
        
        - Thought + (Action or Self Question)
        OR
        - Observation
        OR
        - Final Answer

        Below the explanation of each one:

        ### Thought + (Action or Self Question)

        {
           "thought": "your thoughts about what to next" // it could be an action or ask yourself a follow up question
           "action":  "you decide what action to take based on your previous thought",// the action could be a self follow up question or decide to use a tool from the available tools to use,
           "actionInput": the input to the action, just a simple JSON object, enclosed in curly braces, using " to wrap keys and values. Remember to use the Tool Schema.
        }

        Examples: 

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "tavily_search_results_json",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        other

        {
           "thought": "To find out who won the Copa America in 2024, I need to search for the most recent and relevant information."
           "action": "self_question",
           "actionInput": {"query":"Copa America 2024 winner"}
        }

        ### Observation

        {
           "observation":  "Reflect about the result of the action. (E.g:  I got the following results from the tool Can I get the Final Answer from there?)", 
            "isFinalAnswerReady": false // If you have the final answer or not
        }

        ### Final Answer

        IMPORTANT: (Please respect the expected output requirements from the user): A validated technical specifications document ready for development. Must be in Markdown format.

        {
            "finalAnswer": "The final answer to the Task."
        }

        **IMPORTANT**: You must return a valid JSON object. As if you were returning a JSON object from a function.
        ",
            "maxIterations": 10,
            "memory": {
              "id": [
                "langchain",
                "stores",
                "message",
                "in_memory",
                "InMemoryChatMessageHistory",
              ],
              "lc": 1,
              "type": "not_implemented",
            },
            "name": "Mia",
            "role": "Validator",
            "status": "TASK_COMPLETED",
            "store": [Function],
            "tools": [],
          },
          "env": "[REDACTED]",
          "id": "[REDACTED]",
          "llmConfig": {
            "apiKey": "[REDACTED]",
            "maxRetries": 1,
            "model": "gpt-4o-mini",
            "provider": "openai",
          },
          "type": "ReactChampionAgent",
        },
        "dependencies": [],
        "description": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "expectedOutput": "A validated technical specifications document ready for development. Must be in Markdown format.",
        "id": "[REDACTED]",
        "inputs": {
          "founderIdea": "I want to add a Referral program to our SAAS platform.",
        },
        "interpolatedTaskDescription": "Review the technical specifications to ensure they match the founder's vision and that are technically feasible.",
        "isDeliverable": false,
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "stats": null,
        "status": "DONE",
        "store": [Function],
        "title": "",
      },
      "taskStatus": "DONE",
      "taskTitle": "Review the technical...",
      "timestamp": "[REDACTED]",
    },
    {
      "agent": null,
      "logDescription": "Workflow finished with result: # Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
      "logType": "WorkflowStatusUpdate",
      "metadata": {
        "agentCount": 3,
        "costDetails": {
          "costInputTokens": 0.0005,
          "costOutputTokens": 0.0013,
          "totalCost": 0.0018,
        },
        "duration": "[REDACTED]",
        "endTime": "[REDACTED]",
        "iterationCount": 3,
        "llmUsageStats": {
          "callsCount": 3,
          "callsErrorCount": 0,
          "inputTokens": 3320,
          "outputTokens": 2162,
          "parsingErrors": 0,
        },
        "result": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
        "startTime": "[REDACTED]",
        "taskCount": 3,
        "teamName": "Product Specs Team",
      },
      "task": null,
      "timestamp": "[REDACTED]",
      "workflowStatus": "FINISHED",
    },
  ],
  "workflowResult": "# Technical Specifications Document: Referral Program for SAAS Platform

## Table of Contents
1. [User Stories](#user-stories)
2. [System Requirements](#system-requirements)
3. [Acceptance Criteria](#acceptance-criteria)

## User Stories
### User Registration
- **As a** new user, **I want** to sign up and create an account **so that** I can participate in the referral program.

### Unique Referral Links
- **As a** registered user, **I want** to receive a unique referral link **so that** I can share it with my friends and family.

### Tracking System
- **As an** admin, **I want** to monitor how many referrals each user generates **so that** I can assess the program’s effectiveness.

### Referral Rewards
- **As a** user, **I want** to know the types of rewards I can earn through referrals **so that** I can motivate others to sign up.

### Dashboard
- **As a** user, **I want** to view a dashboard that shows my referral stats, rewards earned, and the performance of my referral links **so that** I can track my progress.

### Admin Panel
- **As an** admin, **I want** to manage the referral program through an admin panel **so that** I can set rules, track performance, and issue rewards.

### Notifications
- **As a** user, **I want** to receive automated notifications regarding my referral status and rewards **so that** I am always informed of my progress.

### Terms and Conditions
- **As a** user, **I want** to understand the rules of the referral program **so that** I can ensure compliance and know how to properly participate.

## System Requirements
1. **User Registration**:  
   - Ability to collect user information (name, email, password).
   - Store data securely in a database.

2. **Unique Referral Links**:  
   - Generate unique links for each registered user upon successful registration.
   - Ensure links redirect to the registration page with tracking parameters.

3. **Tracking System**:  
   - Implement a database model to track referrals associated with each user.
   - Create APIs to retrieve referral data for users and admins.

4. **Referral Rewards**:  
   - Define reward structure (discounts, credits) in the system.
   - Ensure rewards can be configured through the admin panel.

5. **Dashboard**:  
   - Provide a user interface for users to view their stats in real-time.
   - Include graphs/charts for data visualization.

6. **Admin Panel**:  
   - Create a web interface for admin to manage the program.
   - Functions to create, read, update, and delete (CRUD) referral configurations.

7. **Notifications**:  
   - Implement an email/SMS notification system.
   - Allow users to customize notification preferences in their profile settings.

8. **Terms and Conditions**:  
   - Document must be easily accessible to users during account creation.
   - Include an acknowledgment checkbox during registration.

## Acceptance Criteria
1. **User Registration**:  
   - Users can register with valid and unique email addresses.
   - Registration confirmation email is sent upon registration.

2. **Unique Referral Links**:  
   - Each user receives a functional referral link after registration.

3. **Tracking System**:  
   - Admin can see the referral data for each user.
   - Data is updated in real-time.

4. **Referral Rewards**:  
   - Rewards are issued automatically upon qualification.
   - Users can view pending and completed rewards.

5. **Dashboard**:  
   - Users can access their dashboard without errors.
   - Dashboard updates in real-time when new referrals occur.

6. **Admin Panel**:  
   - Admin can successfully manage and set rules for the referral program.
   - Admins receive notifications of any issues in the system.

7. **Notifications**:  
   - Users receive timely notifications regarding their referrals and rewards.
   - Notification settings are honored as per user preferences.

8. **Terms and Conditions**:  
   - Users must acknowledge terms before completing registration.
   - Terms are kept up to date and reflect any changes in policy.",
}
`;
